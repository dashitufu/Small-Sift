// Slam_Test.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#pragma once
#include <iostream>
#include "Common.h"
#include "Image.h"
//#include "sift.h"
#include "Matrix.h"
#include "Reconstruct.h"

extern void Test_Main();
extern "C"
{
#include "Buddy_System.h"
}

//template<typename _T>void compute_L_6x10(const _T* ut, _T* l_6x10)
//{
//    const _T* v[4];
//
//    v[0] = ut + 12 * 11;
//    v[1] = ut + 12 * 10;
//    v[2] = ut + 12 * 9;
//    v[3] = ut + 12 * 8;
//
//    _T dv[4][6][3] = {};
//
//    for (int i = 0; i < 4; i++) {
//        int a = 0, b = 1;
//        for (int j = 0; j < 6; j++) {
//            dv[i][j][0] = v[i][3 * a] - v[i][3 * b];
//            dv[i][j][1] = v[i][3 * a + 1] - v[i][3 * b + 1];
//            dv[i][j][2] = v[i][3 * a + 2] - v[i][3 * b + 2];
//
//            b++;
//            if (b > 3) {
//                a++;
//                b = a + 1;
//            }
//        }
//    }
//
//    for (int i = 0; i < 6; i++) {
//        _T* row = l_6x10 + 10 * i;
//
//        row[0] =fDot(dv[0][i], dv[0][i],3);
//        row[1] = 2.0f * fDot(dv[0][i], dv[1][i], 3);
//        row[2] = fDot(dv[1][i], dv[1][i], 3);
//        row[3] = 2.0f * fDot(dv[0][i], dv[2][i], 3);
//        row[4] = 2.0f * fDot(dv[1][i], dv[2][i], 3);
//        row[5] = fDot(dv[2][i], dv[2][i], 3);
//        row[6] = 2.0f * fDot(dv[0][i], dv[3][i], 3);
//        row[7] = 2.0f * fDot(dv[1][i], dv[3][i], 3);
//        row[8] = 2.0f * fDot(dv[2][i], dv[3][i], 3);
//        row[9] = fDot(dv[3][i], dv[3][i], 3);
//    }
//}
//template<typename _T>void compute_rho(_T* rho)
//{
//    rho[0] = dist2(cws[0], cws[1]);
//    rho[1] = dist2(cws[0], cws[2]);
//    rho[2] = dist2(cws[0], cws[3]);
//    rho[3] = dist2(cws[1], cws[2]);
//    rho[4] = dist2(cws[1], cws[3]);
//    rho[5] = dist2(cws[2], cws[3]);
//}
//static void Test_1()
//{
//    typedef float _T;
//    _T A[] = { 81401043.0000004, 0, 3785786.610723382, -20350260.75000007, 0, -4179061.361937989, -20350260.74999999, 0, 5818357.55873324, -20350260.75000034, 0, -4113307.186270402,
//    0, 81432300.0000004, 117350.7948725189, 0, -20358075.00000006, -1399246.850374478, 0, -20358075, -1128417.582280037, 0, -20358075.00000035, -559913.4580616429,
//    3785786.610723382, 117350.7948725189, 7099414.822140575, -4179061.361937989, -1399246.850374478, -2203429.835204655, 5818357.558733238, -1128417.582280037, -1011585.900071895, -4113307.186270402, -559913.4580616432, -2008060.127137177,
//    -20350260.75000007, 0, -4179061.361937989, 20350260.75, 0, 1575525.549201274, 4.10000211559236e-09, 0, -1181923.202764022, 4.500725481193513e-08, 0, 637548.5561817152,
//    0, -20358075.00000006, -1399246.850374478, 0, 20358075.00000002, 2277498.257520095, 0, 5.116817192174494e-09, 1138724.902746346, 0, 4.511821316555142e-08, -241481.6239458868,
//    -4179061.361937989, -1399246.850374478, -2203429.835204655, 1575525.549201274, 2277498.257520095, 2155660.123806759, -1181923.202764022, 1138724.902746346, -682556.2574547977, 637548.5561817151, -241481.6239458868, 52960.3772317157,
//    -20350260.74999999, 0, 5818357.558733238, 4.10000211559236e-09, 0, -1181923.202764022, 20350260.74999999, 0, -526502.7873371042, 6.126356311142445e-09, 0, -276204.8832042375,
//    0, -20358075, -1128417.582280037, 0, 5.116817192174494e-09, 1138724.902746346, 0, 20358074.99999999, 421336.0056698368, 0, 6.446498446166515e-09, 478420.6290737221,
//    5818357.55873324, -1128417.582280037, -1011585.900071895, -1181923.202764022, 1138724.902746346, -682556.2574547977, -526502.7873371042, 421336.0056698368, 2148917.941823726, -276204.8832042374, 478420.6290737221, 92708.68728429204,
//    -20350260.75000034, 0, -4113307.186270402, 4.500725481193513e-08, 0, 637548.5561817151, 6.126356311142445e-09, 0, -276204.8832042374, 20350260.75000031, 0, 3653805.935761333,
//    0, -20358075.00000035, -559913.4580616432, 0, 4.511821316555142e-08, -241481.6239458868, 0, 6.446498446166515e-09, 478420.6290737221, 0, 20358075.0000003, 994013.9903147592,
//    -4113307.186270402, -559913.4580616429, -2008060.127137177, 637548.5561817152, -241481.6239458868, 52960.3772317157, -276204.8832042375, 478420.6290737221, 92708.68728429204, 3653805.935761333, 994013.9903147592, 1772341.681135142 };
//    SVD_Info oSVD;
//    int iResult;
//    SVD_Alloc(12, 12, &oSVD, A);
//    svd_3(A, oSVD, &iResult);
//    Disp((_T*)oSVD.S, 12, 1, "S");
//    _T l_6x10[6 * 10], rho[6];
//    _T* Ut = (_T*)oSVD.U;
//    Matrix_Transpose((_T*)oSVD.U, 12, 12, Ut);
//    compute_L_6x10(Ut, l_6x10);
//
//    Disp(l_6x10, 6, 10);
//    return;
//}

int main()
{
    Init_Env();
    //Test_1();
	Test_Main();
    Free_Env();
#ifdef WIN32
    _CrtDumpMemoryLeaks();
#endif
}
